#![allow(unused)]

use crate::matrix::Matrix;

struct Neuron<const INPUTS: usize> {
    // Un neurone a un poids pour chaque entr√©e, donc 1 colonne
    weights: Matrix<INPUTS, 1>,
    // Le biais est un scalaire
    bias: f64,
}
impl<const INPUTS: usize> Neuron<INPUTS> {
    fn new() -> Self {
        Neuron {
            weights: Matrix::rand(-1.0..1.0),
            bias: 0.0,
        }
    }

    // z = w * x + b
    fn forward(&self, inputs: Matrix<INPUTS, 1>) -> Matrix<1, 1> {
        let weighted_sum = self.weights.transpose().multiply(inputs) + self.bias;
        weighted_sum.mapv(|x| x.max(0.0)) // ReLU activation
    }
}
